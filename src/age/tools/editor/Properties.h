#pragma once

#ifdef WIN32
#pragma warning(push, 0)
#endif

#include <rttr/registration.h>

#ifdef WIN32
#pragma warning(pop)
#endif

#include <age/entity/Entity.h>
#include <typeindex>

namespace age
{
	///
	///	\class Property
	///
	///	\brief A property system that wraps an entity to make data changes through reflection.
	///
	///	In order to prevent adding in virtual tables or other types of overhead generated by property/reflection systems
	///	use this property class instead. Registered components and be added,removed, edited through type reflection without
	///	needing to know the type of the component during run time.
	///
	///	\author Aaron Shelley
	///
	///	\date March 9, 2019
	///
	class Property
	{
	public:
		Property(age::entity::Entity& x);

		///
		///	A type alias map of typeids to human readable strings.
		///
		static std::unordered_map<std::type_index, std::string> Alias;

		///
		///	Add a component to the wrapped entity.
		///
		void addComponent(const std::string& component);

		///
		///	Remove a component to the wrapped entity.
		///
		void removeComponent(const std::string& component);

		///
		///	Set a value to a registered property for a given component on the wrapped entity.
		///
		void setValue(const std::string& component, const std::string& property, rttr::argument arg);

		///
		///	Set a value to a registered property for a given component on the wrapped entity.
		///
		void setValue(const std::type_index& component, const std::string& property, rttr::argument arg);

		///
		///	Get the value of the registerd property for the given component.
		///
		std::string getValue(const std::string& component, const std::string& property);

		///
		///	Get the value of the registerd property for the given component.
		///
		std::string getValue(const std::type_index& component, const std::string& property);

	private:
		std::unordered_map<std::string, rttr::variant> components;
		age::entity::Entity& entity;
	};
}
